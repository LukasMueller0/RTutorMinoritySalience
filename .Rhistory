install.packages("Rtools")
library(installr)
install.Rtools()
install.Rtools()
```s
install.packages("RTutor",repos = c("https://skranz-repo.github.io/drat/",getOption("repos")))
if (!require(devtools))
install.packages("devtools")
devtools::install_github("LukasMueller0/RTutorMinoritySalience")
install.packages("RTutor",repos = c("https://skranz-repo.github.io/drat/",getOption("repos")))
```
devtools::install_github("LukasMueller0/RTutorMinoritySalience")
library(RTutorMinoritySalience)
install.packages("RTutorMinoritySalience")
if (!require(devtools))
install.packages("devtools")
devtools::install_github("LukasMueller0/RTutorMinoritySalience")
library(RTutorMinoritySalience)
library(RTutorMinoritySalience)
install.packages("RTutor",repos = c("https://skranz-repo.github.io/drat/",getOption("repos")))
if (!require(devtools))
install.packages("devtools")
devtools::install_github("LukasMueller0/RTutorMinoritySalience")
install.packages("RTutor", repos = c("https://skranz-repo.github.io/drat/", getOption("repos")))
library(RTutorMinoritySalience)
# Adapt your working directory to an existing folder
setwd("C:/problemsets/RTutorMinoritySalience")
run.ps(user.name="Jon Doe", package="RTutorMinoritySalience",
auto.save.code=TRUE, clear.user=FALSE)
run.ps(user.name="Jon Doe", package="RTutorMinoritySalience",
auto.save.code=TRUE, clear.user=FALSE)
run.ps(user.name="Jon Doe", package="RTutorMinoritySalience",
auto.save.code=TRUE, clear.user=FALSE)
library(RTutorMinoritySalience)
C:\Users\Lukas\OneDrive\Desktop\TestPS
library(RTutorMinoritySalience)
# Adapt your working directory to an existing folder
setwd("C:/Users/Lukas/OneDrive/Desktop/TestPS")
# Adapt your user name
run.ps(user.name="Jon Doe", package="RTutorMinoritySalience",
auto.save.code=TRUE, clear.user=FALSE)
library(RTutorMinoritySalience)
# Adapt your working directory to an existing folder
setwd("C:/Users/Lukas/OneDrive/Desktop/TestPS")
# Adapt your user name
run.ps(user.name="Jon Doe", package="RTutorMinoritySalience",
auto.save.code=TRUE, clear.user=FALSE)
library(RTutorMinoritySalience)
# Adapt your working directory to an existing folder
setwd("C:/Users/Lukas/OneDrive/Desktop/TestPS")
# Adapt your user name
run.ps(user.name="Jon Doe", package="RTutorMinoritySalience",
auto.save.code=TRUE, clear.user=FALSE)
library(RTutorMinoritySalience)
install.packages("RTutor",repos = c("https://skranz-repo.github.io/drat/",getOption("repos")))
if (!require(devtools))
install.packages("devtools")
```
install.packages("RTutor", repos = c("https://skranz-repo.github.io/drat/", getOption("repos")))
install.packages("RTutor",repos = c("https://skranz-repo.github.io/drat/",getOption("repos")))
if (!require(devtools))
install.packages("devtools")
```
install.packages("RTutor", repos = c("https://skranz-repo.github.io/drat/", getOption("repos")))
library(RTutorMinoritySalience)
# Adapt your working directory to an existing folder
setwd("C:/Users/Lukas/OneDrive/Desktop/TestPS")
# Adapt your user name
run.ps(user.name="Jon Doe", package="RTutorMinoritySalience",
auto.save.code=TRUE, clear.user=FALSE)
library(RTutorMinoritySalience)
# Adapt your working directory to an existing folder
setwd("C:/Users/Lukas/OneDrive/Desktop/TestPS")
# Adapt your user name
run.ps(user.name="Jon Doe", package="RTutorMinoritySalience",
auto.save.code=TRUE, clear.user=FALSE)
library(RTutorMinoritySalience)
library(RTutorMinoritySalience)
# Adapt your working directory to an existing folder
setwd("C:/Users/Lukas/OneDrive/Desktop/TestPS")
# Adapt your user name
run.ps(user.name="Jon Doe", package="RTutorMino
library(RTutorMinoritySalience)
# Adapt your working directory to an existing folder
setwd("C:/Users/Lukas/OneDrive/Desktop/TestPS")
library(RTutorMinoritySalience)
setwd("C:/Users/Lukas/OneDrive/Desktop/TestPS")
getwd()
run.ps(user.name="Jon Doe", package="RTutorMinoritySalience",
auto.save.code=TRUE, clear.user=FALSE)
library("installr")
install.Rtools()
library(RTutorMinoritySalience)
# Adapt your working directory to an existing folder
setwd("C:/Users/Lukas/OneDrive/Desktop/TestPS")
# Adapt your user name
run.ps(user.name="Jon Doe", package="RTutorMinoritySalience",
auto.save.code=TRUE, clear.user=FALSE)
library(RTutorMinoritySalience)
# Adapt your working directory to an existing folder
setwd("C:/Users/Lukas/OneDrive/Desktop/TestPS")
# Adapt your user name
run.ps(user.name="Jon Doe", package="RTutorMinoritySalience",
auto.save.code=TRUE, clear.user=FALSE)
library(RTutorMinoritySalience)
# Adapt your working directory to an existing folder
setwd("C:/Users/Lukas/OneDrive/Desktop/TestPS")
# Adapt your user name
run.ps(user.name="Jon Doe", package="RTutorMinoritySalience",
auto.save.code=TRUE, clear.user=FALSE)
install.rtutor(update.github=TRUE)
library(RTutor)
install.rtutor(update.github=TRUE)
if (!require(devtools))
install.packages("devtools")
devtools::source_gist("gist.github.com/skranz/fad6062e5462c9d0efe4", filename="install_rtutor.r")
install.rtutor(update.github=TRUE)
library(RTutor)
# Create app based on .rps
ps.name = "RTutorMinoritySalience" # problem set name
libs = c("ggplot2", "dplyr", "tidyverse", "ggpubr", "stargazer", "lfe", "dagitty", "ggdag", "kableExtra", "haven") # list of all libraries used by ps
# Folder that contains your .rps file
rps.dir = "D:/RTutorProblemSet/App/Files"
# Folder in which app shall be created
app.dir = "D:/RTutorProblemSet/App/Location"
rtutor.app.skel(ps.name=ps.name, app.name="RTutorMinoritySalience",
app.dir=app.dir, rps.dir = rps.dir,
rps.app = TRUE, libs=libs,overwrite=TRUE)
getwd()
file.exists("D:/RTutorProblemSet/App/Files")
file.exists("D:/RTutorProblemSet/App/Location")
# Create app based on .rps
ps.name = "RTutorMinoritySalience" # problem set name
libs = c("ggplot2", "dplyr", "tidyverse", "ggpubr", "stargazer", "lfe", "dagitty", "ggdag", "kableExtra", "haven") # list of all libraries used by ps
# Folder that contains your .rps file
rps.dir = "D:/RTutorProblemSet/App/Files"
# Folder in which app shall be created
app.dir = "D:/RTutorProblemSet/App/Location"
rtutor.app.skel(ps.name=ps.name, app.name="RTutorMinoritySalience",
app.dir=app.dir, rps.dir = rps.dir,
rps.app = TRUE, libs=libs,overwrite=TRUE)
library(RTutor)
setwd("D:/RTutorProblemSet")
ps.name = "MinoritySalience"
sol.file = paste0(ps.name,"_sol.Rmd")
libs = c("ggplot2", "dplyr", "tidyverse", "ggpubr", "stargazer", "lfe", "dagitty", "ggdag", "kableExtra", "haven")
name.rmd.chunks(sol.file)
create.ps(sol.file = sol.file, ps.name= ps.name, libs=libs, addons = "quiz")
ps.name = "RTutorMinoritySalience" # problem set name
libs = c("ggplot2", "dplyr", "tidyverse", "ggpubr", "stargazer", "lfe", "dagitty", "ggdag", "kableExtra", "haven") # list of all libraries used by ps
# Folder that contains your .rps file
rps.dir = "D:/RTutorProblemSet/App/Files"
# Folder in which app shall be created
app.dir = "D:/RTutorProblemSet/App/Location"
rtutor.app.skel(ps.name=ps.name, app.name="RTutorMinoritySalienceApp",
app.dir=app.dir, rps.dir = rps.dir,
rps.app = TRUE, libs=libs,overwrite=TRUE)
#Show PS
show.ps(ps.name,sample.solution=FALSE,auto.save.code = TRUE)
library(RTutor)
setwd("D:/RTutorProblemSet")
ps.name = "MinoritySalience"
sol.file = paste0(ps.name,"_sol.Rmd")
libs = c("ggplot2", "dplyr", "tidyverse", "ggpubr", "stargazer", "lfe", "dagitty", "ggdag", "kableExtra", "haven")
name.rmd.chunks(sol.file)
create.ps(sol.file = sol.file, ps.name= ps.name, libs=libs, addons = "quiz")
#Show PS
show.ps(ps.name,sample.solution=FALSE,auto.save.code = TRUE)
install.packages('rsconnect')
getwd(
getwd()
# Set app directory as working directory
setwd("D:/RTutorProblemSet/App/Location/app")
#  3. Then adapt and run the lines below
if (FALSE) {
# You must adapt the following lines to your account as explained in
#  http://shiny.rstudio.com/articles/shinyapps.html
rsconnect::setAccountInfo(name='io6ej4-lukasmueller0',
token='82C46A19CA1DA315CEE3E620C1018FFF',
secret='p1Wz9x1O/heajO/J5mH/px5gdnsw6WurGSIlL/ug')
library(rsconnect)
# Set app directory as working directory
setwd("D:/RTutorProblemSet/App/Location/app")
# Set skranz.r-universe.dev repo.
# Needed so that shinyapps.io finds all required packages
options(repos = c(skranz = 'https://skranz.r-universe.dev',
CRAN = 'https://cloud.r-project.org'))
# This command deploys your app on shinyapps.io
deployApp(appName="RTutorMinoritySalience")
# You can now log in on shinyapps.io to get usage statistics about your app
}
rsconnect::setAccountInfo(name='io6ej4-lukasmueller0',
token='82C46A19CA1DA315CEE3E620C1018FFF',
secret='p1Wz9x1O/heajO/J5mH/px5gdnsw6WurGSIlL/ug')
library(rsconnect)
# Set app directory as working directory
setwd("D:/RTutorProblemSet/App/Location/app")
# Set skranz.r-universe.dev repo.
# Needed so that shinyapps.io finds all required packages
options(repos = c(skranz = 'https://skranz.r-universe.dev',
CRAN = 'https://cloud.r-project.org'))
# This command deploys your app on shinyapps.io
deployApp(appName="RTutorMinoritySalience")
install.rtutor = function(update.cran=FALSE, update.github=TRUE, lib=.libPaths()[1], upgrade="never", force=TRUE,...) {
cat("\nInstall required packages from CRAN...")
# Avoid devtools::install_github warnings converted to errors
# See https://remotes.r-lib.org/#environment-variables
Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS="true")
pkgs = c("withr","devtools","whisker","stringr","jsonlite","data.table","markdown","DT","dplyr","shiny","shinyBS","hwriter","lmtest","texreg","RCurl", "memoise","shinyAce","restorepoint")
for (pkg in pkgs) {
if (!update.cran) {
if (!require(pkg, character.only=TRUE) | update.cran)
try(install.packages(pkg,lib=lib))
} else {
try(detach(paste0("package:",pkg), character.only=TRUE, force=TRUE), silent=TRUE)
try(install.packages(pkg,lib=lib))
}
}
cat("\nInstall required packages from Github...")
# Install packages from Github
repos = c(
"skranz/stringtools",
"skranz/shinyEvents",
"skranz/dplyrExtras",
"skranz/regtools",
"skranz/RTutor"
)
library(withr)
for (repo in repos) {
pkg = strsplit(repo,"/", fixed=TRUE)[[1]][2]
if (!update.github) {
if (!require(pkg, character.only=TRUE) | overwrite.github)
try(with_libpaths(new = lib, devtools::install_github(repo=repo, upgrade=upgrade,...)))
} else {
try(detach(paste0("package:",pkg), character.only=TRUE,force=TRUE), silent=TRUE)
try(with_libpaths(new = lib, devtools::install_github(repo=repo, upgrade=upgrade, force=force,...)))
}
}
library(RTutor)
}
# install.rtutor()
install.rtutor = function(update.cran=FALSE, update.github=TRUE, lib=.libPaths()[1], upgrade="never", force=TRUE,...) {
cat("\nInstall required packages from CRAN...")
# Avoid devtools::install_github warnings converted to errors
# See https://remotes.r-lib.org/#environment-variables
Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS="true")
pkgs = c("withr","devtools","whisker","stringr","jsonlite","data.table","markdown","DT","dplyr","shiny","shinyBS","hwriter","lmtest","texreg","RCurl", "memoise","shinyAce","restorepoint")
for (pkg in pkgs) {
if (!update.cran) {
if (!require(pkg, character.only=TRUE) | update.cran)
try(install.packages(pkg,lib=lib))
} else {
try(detach(paste0("package:",pkg), character.only=TRUE, force=TRUE), silent=TRUE)
try(install.packages(pkg,lib=lib))
}
}
cat("\nInstall required packages from Github...")
# Install packages from Github
repos = c(
"skranz/stringtools",
"skranz/shinyEvents",
"skranz/dplyrExtras",
"skranz/regtools",
"skranz/RTutor"
)
library(withr)
for (repo in repos) {
pkg = strsplit(repo,"/", fixed=TRUE)[[1]][2]
if (!update.github) {
if (!require(pkg, character.only=TRUE) | overwrite.github)
try(with_libpaths(new = lib, devtools::install_github(repo=repo, upgrade=upgrade,...)))
} else {
try(detach(paste0("package:",pkg), character.only=TRUE,force=TRUE), silent=TRUE)
try(with_libpaths(new = lib, devtools::install_github(repo=repo, upgrade=upgrade, force=force,...)))
}
}
library(RTutor)
}
install.rtutor()
ps.name = "RTutorMinoritySalience" # problem set name
> libs = c("ggplot2", "dplyr", "tidyverse", "ggpubr", "stargazer", "lfe", "dagitty", "ggdag", "kableExtra", "haven") # list of all libraries used by ps
ps.name = "RTutorMinoritySalience" # problem set name
libs = c("ggplot2", "dplyr", "tidyverse", "ggpubr", "stargazer", "lfe", "dagitty", "ggdag", "kableExtra", "haven") # list of all libraries used by ps
# Folder that contains your .rps file
rps.dir = "D:/RTutorProblemSet/App/Files"
# Folder in which app shall be created
app.dir = "D:/RTutorProblemSet/App/Location"
rtutor.app.skel(ps.name=ps.name, app.name="RTutorMinoritySalience",
+                 app.dir=app.dir, rps.dir = rps.dir,
rtutor.app.skel(ps.name=ps.name, app.name="RTutorMinoritySalience",
+                 app.dir=app.dir, rps.dir = rps.dir,
rtutor.app.skel(ps.name=ps.name, app.name="RTutorMinoritySalienceApp",
+                 app.dir=app.dir, rps.dir = rps.dir,
rtutor.app.skel(ps.name=ps.name, app.name="RTutorMinoritySalience",
+                 app.dir=app.dir, rps.dir = rps.dir,
ps.name = "RTutorMinoritySalience" # problem set name
libs = c("ggplot2", "dplyr", "tidyverse", "ggpubr", "stargazer", "lfe", "dagitty", "ggdag", "kableExtra", "haven") # list of all libraries used by ps
# Folder that contains your .rps file
rps.dir = "D:/RTutorProblemSet/App/Files"
# Folder in which app shall be created
app.dir = "D:/RTutorProblemSet/App/Location"
rtutor.app.skel(ps.name=ps.name, app.name="RTutorMinoritySalience",
app.dir=app.dir, rps.dir = rps.dir,
rps.app = TRUE, libs=libs,overwrite=TRUE)
getwd()
rtutor.app.skel(ps.name=ps.name, app.name="RTutorMinoritySalience",
app.dir=app.dir, rps.dir = rps.dir,
rps.app = TRUE, libs=libs,overwrite=TRUE)
rtutor.app.skel(ps.name=ps.name, app.name="RTutorMinoritySalience",
app.dir=app.dir, rps.dir = rps.dir,
rps.app = TRUE, libs=libs,overwrite=TRUE)
#  3. Then adapt and run the lines below
if (FALSE) {
# You must adapt the following lines to your account as explained in
#  http://shiny.rstudio.com/articles/shinyapps.html
rsconnect::setAccountInfo(name='io6ej4-lukasmueller0',
token='82C46A19CA1DA315CEE3E620C1018FFF',
secret='p1Wz9x1O/heajO/J5mH/px5gdnsw6WurGSIlL/ug')
library(rsconnect)
# Set app directory as working directory
setwd("D:/RTutorProblemSet/App/Location/app")
# Set skranz.r-universe.dev repo.
# Needed so that shinyapps.io finds all required packages
options(repos = c(skranz = 'https://skranz.r-universe.dev',
CRAN = 'https://cloud.r-project.org'))
# This command deploys your app on shinyapps.io
deployApp(appName="RTutorMinoritySalience")
# You can now log in on shinyapps.io to get usage statistics about your app
}
rsconnect::setAccountInfo(name='io6ej4-lukasmueller0',
token='82C46A19CA1DA315CEE3E620C1018FFF',
secret='p1Wz9x1O/heajO/J5mH/px5gdnsw6WurGSIlL/ug')
library(rsconnect)
# Set app directory as working directory
setwd("D:/RTutorProblemSet/App/Location/app")
# Set skranz.r-universe.dev repo.
# Needed so that shinyapps.io finds all required packages
options(repos = c(skranz = 'https://skranz.r-universe.dev',
CRAN = 'https://cloud.r-project.org'))
# This command deploys your app on shinyapps.io
deployApp(appName="RTutorMinoritySalience")
library(shiny)
runApp()
deployApp()
runApp()
# This command deploys your app on shinyapps.io
deployApp(appName="RTutorMinoritySalience")
install.packages("restorepoint", repos = c("https://skranz.r-universe.dev", "https://cloud.r-project.org"))
install.packages("restorepoint", repos = c("https://skranz.r-universe.dev", "https://cloud.r-project.org"))
install.packages("restorepoint", repos = c("https://skranz.r-universe.dev", "https://cloud.r-project.org"))
detach("package:restorepoint", unload = TRUE)
install.packages("restorepoint", repos = c("https://skranz.r-universe.dev", "https://cloud.r-project.org"))
install.packages("restorepoint", repos = c("https://skranz.r-universe.dev", "https://cloud.r-project.org"))
if (!require(devtools)) install.packages("devtools")
# devtools::install_github("skranz/restorepoint")
install.packages("restorepoint", repos = c('https://skranz.r-universe.dev', 'https://cloud.r-project.org'))
install.packages("restorepoint", repos = c("https://skranz.r-universe.dev", "https://cloud.r-project.org"))
# This command deploys your app on shinyapps.io
deployApp(appName="RTutorMinoritySalience")
#  3. Then adapt and run the lines below
if (FALSE) {
# You must adapt the following lines to your account as explained in
#  http://shiny.rstudio.com/articles/shinyapps.html
rsconnect::setAccountInfo(name='io6ej4-lukasmueller0',
token='82C46A19CA1DA315CEE3E620C1018FFF',
secret='p1Wz9x1O/heajO/J5mH/px5gdnsw6WurGSIlL/ug')
library(rsconnect)
# Set app directory as working directory
setwd("D:/RTutorProblemSet/App/Location/app")
# Set skranz.r-universe.dev repo.
# Needed so that shinyapps.io finds all required packages
options(repos = c(skranz = 'https://skranz.r-universe.dev',
CRAN = 'https://cloud.r-project.org'))
# This command deploys your app on shinyapps.io
deployApp(appName="RTutorMinoritySalience")
# You can now log in on shinyapps.io to get usage statistics about your app
}
rsconnect::setAccountInfo(name='io6ej4-lukasmueller0',
token='82C46A19CA1DA315CEE3E620C1018FFF',
secret='p1Wz9x1O/heajO/J5mH/px5gdnsw6WurGSIlL/ug')
library(rsconnect)
# Set app directory as working directory
setwd("D:/RTutorProblemSet/App/Location/app")
# Set skranz.r-universe.dev repo.
# Needed so that shinyapps.io finds all required packages
options(repos = c(skranz = 'https://skranz.r-universe.dev',
CRAN = 'https://cloud.r-project.org'))
# This command deploys your app on shinyapps.io
deployApp(appName="RTutorMinoritySalience")
devtools::install_github("skranz/restorepoint")
remove.packages("restorepoint")
devtools::install_github("skranz/restorepoint")
if (!require(devtools)) install.packages("devtools")
devtools::install_github("skranz/restorepoint")
rsconnect::setAccountInfo(name='io6ej4-lukasmueller0',
token='82C46A19CA1DA315CEE3E620C1018FFF',
secret='p1Wz9x1O/heajO/J5mH/px5gdnsw6WurGSIlL/ug')
library(rsconnect)
# Set app directory as working directory
setwd("D:/RTutorProblemSet/App/Location/app")
# Set skranz.r-universe.dev repo.
# Needed so that shinyapps.io finds all required packages
options(repos = c(skranz = 'https://skranz.r-universe.dev',
CRAN = 'https://cloud.r-project.org'))
# This command deploys your app on shinyapps.io
deployApp(appName="RTutorMinoritySalience")
